<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : "Trang ch·ªß" %> | USSH Freshers' Hub</title>
    <meta name="description" content="C·ªông ƒë·ªìng tr·ª±c tuy·∫øn d√†nh cho sinh vi√™n nƒÉm nh·∫•t Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc X√£ h·ªôi v√† Nh√¢n vƒÉn">
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/components/navbar.css">
    <link rel="stylesheet" href="/css/components/footer.css">
    <link rel="stylesheet" href="/css/pages.css">
    
    <!-- Kh·ªëi <style> t·∫°m th·ªùi ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè kh·ªèi ƒë√¢y -->

</head>
<body>
    <a href="#main-content" class="skip-link">Chuy·ªÉn ƒë·∫øn n·ªôi dung ch√≠nh</a>
    
    <%- include('../partials/header') %>
    
    <main id="main-content" class="main-content">
        <div class="container">
            <% if (locals.success_msg && success_msg.length > 0) { %>
                <div class="alert alert-success" role="alert"><%= success_msg %></div>
            <% } %>
            <% if (locals.error_msg && error_msg.length > 0) { %>
                <div class="alert alert-danger" role="alert"><%= error_msg %></div>
            <% } %>
            <% if (locals.error && error.length > 0) { %>
                <div class="alert alert-danger" role="alert"><%= error %></div>
            <% } %>

            <%- typeof body !== 'undefined' ? body : '' %>
        </div>
    </main>
    
    <%- include('../partials/footer') %>
    
    <div id="chatbot-container">
        <div id="chatbot-bubble"><i class="fas fa-robot"></i></div>
        <div id="chatbot-window">
            <div class="chatbot-header">
                <h4>Tr·ª£ l√Ω AI - USSH</h4>
                <button class="chatbot-close-btn" aria-label="ƒê√≥ng">&times;</button>
            </div>
            <div class="chatbot-messages">
                <div class="message bot"><div class="text">üëã Ch√†o b·∫°n! T√¥i l√† Tr·ª£ l√Ω AI c·ªßa USSH. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?</div></div>
            </div>
            <div class="chatbot-input">
                <input type="text" id="chatbot-input-field" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...">
                <button id="chatbot-send-btn" aria-label="G·ª≠i"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </div>
    
    <!-- JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const chatbotBubble = document.getElementById('chatbot-bubble');
            const chatbotWindow = document.getElementById('chatbot-window');
            const closeButton = chatbotWindow.querySelector('.chatbot-close-btn');
            const sendButton = document.getElementById('chatbot-send-btn');
            const inputField = document.getElementById('chatbot-input-field');
            const messagesContainer = chatbotWindow.querySelector('.chatbot-messages');
            
            if (chatbotBubble && chatbotWindow && closeButton) {
                chatbotBubble.addEventListener('click', () => chatbotWindow.classList.toggle('open'));
                closeButton.addEventListener('click', () => chatbotWindow.classList.remove('open'));
            }

            const sendMessage = () => {
                const messageText = inputField.value.trim();
                if (messageText === '') return;
                addMessageToUI(messageText, 'user');
                inputField.value = '';
                showTypingIndicator();
                sendMessageToBackend(messageText);
            };

            sendButton.addEventListener('click', sendMessage);
            inputField.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') { e.preventDefault(); sendMessage(); }
            });

            function addMessageToUI(text, sender, isTyping = false) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}`;
                if (isTyping) {
                    messageDiv.id = 'typing-indicator';
                    messageDiv.innerHTML = `<div class="text"><div class="typing-indicator"><span></span><span></span><span></span></div></div>`;
                } else {
                    const cleanText = text.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    messageDiv.innerHTML = `<div class="text">${cleanText}</div>`;
                }
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            function showTypingIndicator() { addMessageToUI('', 'bot', true); }
            function removeTypingIndicator() {
                const indicator = document.getElementById('typing-indicator');
                if (indicator) indicator.remove();
            }
            
            async function sendMessageToBackend(message) {
                try {
                    const response = await fetch('/api/chatbot/message', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: message })
                    });

                    if (!response.ok) { throw new Error('L·ªói m·∫°ng ho·∫∑c server'); }

                    const result = await response.json();
                    removeTypingIndicator();

                    if (result.success && result.data && result.data.message) {
                        addMessageToUI(result.data.message, 'bot');
                    } else {
                        addMessageToUI("R·∫•t ti·∫øc, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho v·∫•n ƒë·ªÅ n√†y.", 'bot');
                    }
                } catch (error) {
                    removeTypingIndicator();
                    addMessageToUI("ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", 'bot');
                    console.error("Chatbot Error:", error);
                }
            }

            if (typeof io !== 'undefined') {
                window.realtimeService = { socket: io(), isConnected: true, on: (e, cb) => window.realtimeService.socket.on(e, cb) };
            } else {
                window.realtimeService = { isConnected: false };
            }
        });
    </script>
</body>
</html>

