<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : "Trang ch·ªß" %> | USSH Freshers' Hub</title>
    <meta name="description" content="C·ªông ƒë·ªìng tr·ª±c tuy·∫øn d√†nh cho sinh vi√™n nƒÉm nh·∫•t Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc X√£ h·ªôi v√† Nh√¢n vƒÉn">
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/components/navbar.css">
    <link rel="stylesheet" href="/css/pages.css">

    <!-- [TH√äM M·ªöI] CSS cho thi·∫øt k·∫ø Chatbot ki·ªÉu Messenger -->
    <style>
        #chatbot-container {
            position: fixed;
            bottom: 25px;
            right: 25px;
            z-index: 1000;
        }

        #chatbot-bubble {
            width: 60px;
            height: 60px;
            background-color: #0d6efd;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 28px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            transition: transform 0.2s ease-in-out;
        }
        #chatbot-bubble:hover {
            transform: scale(1.1);
        }

        #chatbot-window {
            width: 370px;
            height: 500px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.2);
            position: absolute;
            bottom: 80px; /* Kho·∫£ng c√°ch v·ªõi bong b√≥ng */
            right: 0;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            
            /* Hi·ªáu ·ª©ng ƒë√≥ng/m·ªü */
            transform: scale(0.95) translateY(10px);
            opacity: 0;
            visibility: hidden;
            transform-origin: bottom right;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        #chatbot-window.open {
            transform: scale(1) translateY(0);
            opacity: 1;
            visibility: visible;
        }

        .chatbot-header {
            background-color: #0d6efd;
            color: white;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .chatbot-header h4 {
            margin: 0;
            font-size: 1.1rem;
        }
        .chatbot-close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .chatbot-messages {
            flex-grow: 1;
            padding: 1rem;
            overflow-y: auto;
            background-color: #f4f7f9;
        }
        .message {
            margin-bottom: 1rem;
            display: flex;
            max-width: 85%;
        }
        .message.user {
            margin-left: auto;
            flex-direction: row-reverse;
        }
        .message .text {
            padding: 0.75rem 1rem;
            border-radius: 1.25rem;
        }
        .message.bot .text {
            background-color: #e9ecef;
            color: #212529;
            border-bottom-left-radius: 0.25rem;
        }
        .message.user .text {
            background-color: #0d6efd;
            color: white;
            border-bottom-right-radius: 0.25rem;
        }

        .chatbot-input {
            border-top: 1px solid #dee2e6;
            padding: 0.75rem;
            display: flex;
            align-items: center;
        }
        .chatbot-input input {
            flex-grow: 1;
            border: 1px solid #ced4da;
            border-radius: 50rem;
            padding: 0.5rem 1rem;
            margin-right: 0.5rem;
        }
        .chatbot-input input:focus {
            outline: none;
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        .chatbot-input button {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #0d6efd;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <a href="#main-content" class="skip-link">Chuy·ªÉn ƒë·∫øn n·ªôi dung ch√≠nh</a>
    
    <%- include('../partials/header') %>
    
    <main id="main-content" class="main-content">
        <div class="container">
            <% if (locals.success_msg && success_msg.length > 0) { %>
                <div class="alert alert-success" role="alert"><%= success_msg %></div>
            <% } %>
            <% if (locals.error_msg && error_msg.length > 0) { %>
                <div class="alert alert-danger" role="alert"><%= error_msg %></div>
            <% } %>
            <% if (locals.error && error.length > 0) { %>
                <div class="alert alert-danger" role="alert"><%= error %></div>
            <% } %>

            <%- typeof body !== 'undefined' ? body : '' %>
        </div>
    </main>
    
    <%- include('../partials/footer') %>
    
    <!-- [THAY ƒê·ªîI] To√†n b·ªô Chatbot ƒë∆∞·ª£c g·ªôp v√†o ƒë√¢y -->
    <div id="chatbot-container">
        <!-- Bong b√≥ng n·ªïi -->
        <div id="chatbot-bubble">
            <i class="fas fa-comments"></i>
        </div>

        <!-- Khung tr√≤ chuy·ªán (·∫©n m·∫∑c ƒë·ªãnh) -->
        <div id="chatbot-window">
            <div class="chatbot-header">
                <h4>Tr·ª£ l√Ω AI - USSH</h4>
                <button class="chatbot-close-btn" aria-label="ƒê√≥ng">&times;</button>
            </div>
            <div class="chatbot-messages">
                <!-- L·ªùi ch√†o -->
                <div class="message bot">
                    <div class="text">
                        üëã Ch√†o b·∫°n! T√¥i l√† Tr·ª£ l√Ω AI c·ªßa USSH. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?
                    </div>
                </div>
            </div>
            <div class="chatbot-input">
                <input type="text" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...">
                <button aria-label="G·ª≠i"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </div>
    
    <!-- JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <!-- [THAY ƒê·ªîI] D√πng script n√†y ƒë·ªÉ ƒëi·ªÅu khi·ªÉn chatbot, thay v√¨ chatbot-ui.js -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const chatbotBubble = document.getElementById('chatbot-bubble');
            const chatbotWindow = document.getElementById('chatbot-window');
            const closeButton = chatbotWindow.querySelector('.chatbot-close-btn');

            if (chatbotBubble && chatbotWindow && closeButton) {
                // M·ªü/ƒê√≥ng chatbot khi nh·∫•n v√†o bong b√≥ng
                chatbotBubble.addEventListener('click', () => {
                    chatbotWindow.classList.toggle('open');
                });

                // ƒê√≥ng chatbot khi nh·∫•n v√†o n√∫t X
                closeButton.addEventListener('click', () => {
                    chatbotWindow.classList.remove('open');
                });
            }

            // (Ph·∫ßn logic k·∫øt n·ªëi socket.io v·∫´n gi·ªØ nguy√™n)
            if (typeof io !== 'undefined') {
                window.realtimeService = {
                    socket: io(), isConnected: true,
                    on: function(event, callback) { this.socket.on(event, callback); }
                };
            } else {
                 window.realtimeService = { isConnected: false };
            }
        });
    </script>
</body>
</html>

