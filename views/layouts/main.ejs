<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : "Trang ch·ªß" %> | USSH Freshers' Hub</title>
    <meta name="description" content="C·ªông ƒë·ªìng tr·ª±c tuy·∫øn d√†nh cho sinh vi√™n nƒÉm nh·∫•t Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc X√£ h·ªôi v√† Nh√¢n vƒÉn">
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/components/navbar.css">
    <link rel="stylesheet" href="/css/components/footer.css">
    <link rel="stylesheet" href="/css/pages.css">

    <style>
        /* S·ª≠a l·ªói cƒÉn gi·ªØa bi·ªÉu t∆∞·ª£ng tr√™n to√†n trang (c·ªßa b·∫°n) */
        .fas, .fab, .far, .ai-robot i, .floating-card i, .ai-feature i, #chatbot-bubble i {
            display: inline-flex !important;
            align-items: center !important;
            justify-content: center !important;
            width: 1.25em;
        }

        /* --- [B·ªî SUNG] S·ª¨A L·ªñI CƒÇN GI·ªÆA CHO C√ÅC WIDGET --- */
        /* Bu·ªôc c√°c th·∫ª ch·ª©a icon ph·∫£i cƒÉn gi·ªØa n·ªôi dung c·ªßa ch√∫ng */
        .feature-icon, .floating-card, .ai-robot, .ai-feature, .activity-icon, .activity-avatar, .activity-date {
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
        /* ƒê·∫£m b·∫£o c√°c icon l·ªõn c√≥ ƒë·ªß kh√¥ng gian */
        .feature-icon i, .floating-card i, .ai-robot i {
            line-height: 1;
        }
        /* --- K·∫æT TH√öC PH·∫¶N B·ªî SUNG --- */

        /* ----- B·ªë c·ª•c Chatbot Messenger ----- */
        #chatbot-container {
            position: fixed;
            bottom: 100px;
            right: 25px;
            z-index: 1000;
        }

        #chatbot-bubble {
            width: 60px;
            height: 60px;
            background-color: #A16207;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 28px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            transition: transform 0.2s ease-in-out;
        }
        #chatbot-bubble:hover {
            transform: scale(1.1);
        }

        #chatbot-window {
            width: 370px;
            max-height: 70vh;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.2);
            position: absolute;
            bottom: 80px;
            right: 0;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            transform: scale(0.95) translateY(10px);
            opacity: 0;
            visibility: hidden;
            transform-origin: bottom right;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        #chatbot-window.open {
            transform: scale(1) translateY(0);
            opacity: 1;
            visibility: visible;
        }

        .chatbot-header {
            background-color: #A16207;
            color: white;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0;
        }
        .chatbot-header h4 { margin: 0; font-size: 1.1rem; }
        .chatbot-close-btn { background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer; }

        .chatbot-messages {
            flex-grow: 1;
            padding: 1rem;
            overflow-y: auto;
            background-color: #f4f7f9;
        }
        .message { margin-bottom: 1rem; display: flex; max-width: 85%; align-items: flex-end; }
        .message.user { margin-left: auto; flex-direction: row-reverse; }
        .message .text { padding: 0.75rem 1rem; border-radius: 1.25rem; word-wrap: break-word; }
        .message.bot .text { background-color: #e9ecef; color: #212529; border-bottom-left-radius: 0.25rem; }
        .message.user .text { background-color: #A16207; color: white; border-bottom-right-radius: 0.25rem; }
        .message.typing .text { padding: 0.75rem 1rem; }
        .typing-indicator span { height: 8px; width: 8px; background-color: #999; border-radius: 50%; display: inline-block; margin: 0 1px; animation: bounce 1.4s infinite ease-in-out both; }
        .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
        .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
        @keyframes bounce { 0%, 80%, 100% { transform: scale(0); } 40% { transform: scale(1.0); } }

        .chatbot-input { border-top: 1px solid #dee2e6; padding: 0.75rem; display: flex; align-items: center; flex-shrink: 0; }
        .chatbot-input input { flex-grow: 1; border: 1px solid #ced4da; border-radius: 50rem; padding: 0.5rem 1rem; margin-right: 0.5rem; }
        .chatbot-input input:focus { outline: none; border-color: #A16207; box-shadow: 0 0 0 0.25rem rgba(161, 98, 7, 0.25); }
        .chatbot-input button { background: none; border: none; font-size: 1.5rem; color: #A16207; cursor: pointer; }

        .back-to-top {
            position: fixed;
            bottom: 25px !important; 
            right: 25px !important;
            z-index: 999;
        }
    </style>
</head>
<body>
    <a href="#main-content" class="skip-link">Chuy·ªÉn ƒë·∫øn n·ªôi dung ch√≠nh</a>
    
    <%- include('../partials/header') %>
    
    <main id="main-content" class="main-content">
        <div class="container">
            <% if (locals.success_msg && success_msg.length > 0) { %>
                <div class="alert alert-success" role="alert"><%= success_msg %></div>
            <% } %>
            <% if (locals.error_msg && error_msg.length > 0) { %>
                <div class="alert alert-danger" role="alert"><%= error_msg %></div>
            <% } %>
            <% if (locals.error && error.length > 0) { %>
                <div class="alert alert-danger" role="alert"><%= error %></div>
            <% } %>

            <%- typeof body !== 'undefined' ? body : '' %>
        </div>
    </main>
    
    <%- include('../partials/footer') %>
    
    <div id="chatbot-container">
        <div id="chatbot-bubble"><i class="fas fa-robot"></i></div>
        <div id="chatbot-window">
            <div class="chatbot-header">
                <h4>Tr·ª£ l√Ω AI - USSH</h4>
                <button class="chatbot-close-btn" aria-label="ƒê√≥ng">&times;</button>
            </div>
            <div class="chatbot-messages">
                <div class="message bot"><div class="text">üëã Ch√†o b·∫°n! T√¥i l√† Tr·ª£ l√Ω AI c·ªßa USSH. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?</div></div>
            </div>
            <div class="chatbot-input">
                <input type="text" id="chatbot-input-field" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...">
                <button id="chatbot-send-btn" aria-label="G·ª≠i"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </div>
    
    <!-- JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const chatbotBubble = document.getElementById('chatbot-bubble');
            const chatbotWindow = document.getElementById('chatbot-window');
            const closeButton = chatbotWindow.querySelector('.chatbot-close-btn');
            const sendButton = document.getElementById('chatbot-send-btn');
            const inputField = document.getElementById('chatbot-input-field');
            const messagesContainer = chatbotWindow.querySelector('.chatbot-messages');
            
            if (chatbotBubble && chatbotWindow && closeButton) {
                chatbotBubble.addEventListener('click', () => chatbotWindow.classList.toggle('open'));
                closeButton.addEventListener('click', () => chatbotWindow.classList.remove('open'));
            }

            const sendMessage = () => {
                const messageText = inputField.value.trim();
                if (messageText === '') return;
                addMessageToUI(messageText, 'user');
                inputField.value = '';
                showTypingIndicator();
                sendMessageToBackend(messageText);
            };

            sendButton.addEventListener('click', sendMessage);
            inputField.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') { e.preventDefault(); sendMessage(); }
            });

            function addMessageToUI(text, sender, isTyping = false) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}`;
                if (isTyping) {
                    messageDiv.id = 'typing-indicator';
                    messageDiv.innerHTML = `<div class="text"><div class="typing-indicator"><span></span><span></span><span></span></div></div>`;
                } else {
                    const cleanText = text.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                    messageDiv.innerHTML = `<div class="text">${cleanText}</div>`;
                }
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }

            function showTypingIndicator() { addMessageToUI('', 'bot', true); }
            function removeTypingIndicator() {
                const indicator = document.getElementById('typing-indicator');
                if (indicator) indicator.remove();
            }
            
            async function sendMessageToBackend(message) {
                try {
                    const response = await fetch('/api/chatbot/message', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: message })
                    });

                    if (!response.ok) { throw new Error('L·ªói m·∫°ng ho·∫∑c server'); }

                    const result = await response.json();
                    removeTypingIndicator();

                    if (result.success && result.data && result.data.message) {
                        addMessageToUI(result.data.message, 'bot');
                    } else {
                        addMessageToUI("R·∫•t ti·∫øc, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho v·∫•n ƒë·ªÅ n√†y.", 'bot');
                    }
                } catch (error) {
                    removeTypingIndicator();
                    addMessageToUI("ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", 'bot');
                    console.error("Chatbot Error:", error);
                }
            }

            if (typeof io !== 'undefined') {
                window.realtimeService = { socket: io(), isConnected: true, on: (e, cb) => window.realtimeService.socket.on(e, cb) };
            } else {
                window.realtimeService = { isConnected: false };
            }
        });
    </script>
</body>
</html>

