const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const passport = require('passport');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const cors = require('cors');
const flash = require('express-flash');
const path = require('path');
const expressLayouts = require('express-ejs-layouts');
require('dotenv').config();

// === 1. KH·ªûI T·∫†O APP ===
const app = express();
const PORT = process.env.PORT || 3000;
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/ussh_freshers_hub';

// === B·ªî SUNG QUAN TR·ªåNG NH·∫§T: B·∫¢O SERVER TIN T∆Ø·ªû·ªûNG RENDER ===
app.set('trust proxy', 1);

// === 2. K·∫æT N·ªêI DATABASE ===
mongoose.connect(MONGODB_URI)
    .then(() => console.log('‚úÖ Connected to MongoDB'))
    .catch((err) => {
        console.error('‚ùå MongoDB connection error:', err);
        process.exit(1);
    });

// === 3. C·∫§U H√åNH VIEW ENGINE ===
app.use(expressLayouts);
app.set('layout', 'layouts/main');
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// === 4. MIDDLEWARE C∆† B·∫¢N ===
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(helmet({ contentSecurityPolicy: false }));
app.use(compression());
app.use(cors());
app.use(morgan('dev'));

// === 5. MIDDLEWARE X√ÅC TH·ª∞C ===
app.use(session({
    secret: process.env.SESSION_SECRET || 'a-very-strong-secret-key-that-is-long',
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({ mongoUrl: MONGODB_URI }),
    proxy: true, // <-- B·ªî SUNG S·ªê 1: B√ÅO CHO SESSION BI·∫æT C√ì PROXY
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 1000 * 60 * 60 * 24 * 7, // 1 tu·∫ßn
        sameSite: 'lax' // <-- B·ªî SUNG S·ªê 2: TƒÇNG C∆Ø·ªúNG B·∫¢O M·∫¨T V√Ä T∆Ø∆†NG TH√çCH
    }
}));

require('./config/passport')(passport);
app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

// === 6. MIDDLEWARE TO√ÄN C·ª§C ===
app.use((req, res, next) => {
    res.locals.isAuthenticated = req.isAuthenticated();
    res.locals.user = req.user;
    next();
});

// === 7. ROUTES ===
app.use('/', require('./routes/index'));
app.use('/auth', require('./routes/auth'));
// ... (C√°c routes kh√°c c·ªßa b·∫°n)
app.use('/learning-hub', require('./routes/learning-hub'));
app.use('/forum', require('./routes/forum'));
app.use('/wellness', require('./routes/wellness'));
app.use('/handbook', require('./routes/handbook'));

// === 8. X·ª¨ L√ù L·ªñI ===
app.use((req, res, next) => {
    res.status(404).render('pages/404', { title: 'Kh√¥ng t√¨m th·∫•y trang' });
});
app.use((err, req, res, next) => {
    console.error("üí• GLOBAL ERROR HANDLER:", err.stack);
    res.status(500).render('error', { title: 'C√≥ l·ªói x·∫£y ra', message: 'ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra.' });
});

// === 9. KH·ªûI ƒê·ªòNG SERVER ===
app.listen(PORT, () => {
    console.log(`üöÄ Server is running on port ${PORT}`);
});
