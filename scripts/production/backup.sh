#!/bin/bash

# USSH Freshers' Hub - Backup Script
# Usage: ./scripts/production/backup.sh [type]
# Types: full, database, files

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKUP_TYPE=${1:-"full"}
BACKUP_DIR="./backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
LOG_FILE="./logs/backup-$TIMESTAMP.log"

# Create necessary directories
mkdir -p "$BACKUP_DIR" ./logs

# Logging functions
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a "$LOG_FILE"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO:${NC} $1" | tee -a "$LOG_FILE"
}

# Check if Docker containers are running
check_containers() {
    if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
        error "Production containers are not running"
    fi
}

# Backup MongoDB database
backup_database() {
    log "Starting database backup..."
    
    local db_backup_dir="$BACKUP_DIR/mongodb-$TIMESTAMP"
    
    # Create MongoDB backup
    docker-compose -f docker-compose.prod.yml exec -T mongodb mongodump \
        --out "/backups/mongodb-$TIMESTAMP" \
        --gzip
    
    # Copy backup from container to host
    docker cp "$(docker-compose -f docker-compose.prod.yml ps -q mongodb):/backups/mongodb-$TIMESTAMP" "$db_backup_dir"
    
    # Create compressed archive
    tar -czf "$BACKUP_DIR/mongodb-$TIMESTAMP.tar.gz" -C "$BACKUP_DIR" "mongodb-$TIMESTAMP"
    rm -rf "$db_backup_dir"
    
    log "âœ… Database backup completed: mongodb-$TIMESTAMP.tar.gz"
}

# Backup uploaded files
backup_files() {
    log "Starting files backup..."
    
    if [ -d "./uploads" ]; then
        tar -czf "$BACKUP_DIR/uploads-$TIMESTAMP.tar.gz" ./uploads
        log "âœ… Files backup completed: uploads-$TIMESTAMP.tar.gz"
    else
        info "No uploads directory found, skipping files backup"
    fi
}

# Backup application logs
backup_logs() {
    log "Starting logs backup..."
    
    if [ -d "./logs" ]; then
        # Create logs backup excluding current backup log
        tar -czf "$BACKUP_DIR/logs-$TIMESTAMP.tar.gz" \
            --exclude="backup-$TIMESTAMP.log" \
            ./logs
        log "âœ… Logs backup completed: logs-$TIMESTAMP.tar.gz"
    else
        info "No logs directory found, skipping logs backup"
    fi
}

# Backup environment configuration
backup_config() {
    log "Starting configuration backup..."
    
    local config_dir="$BACKUP_DIR/config-$TIMESTAMP"
    mkdir -p "$config_dir"
    
    # Copy important configuration files
    [ -f ".env.production" ] && cp .env.production "$config_dir/"
    [ -f "docker-compose.prod.yml" ] && cp docker-compose.prod.yml "$config_dir/"
    [ -d "nginx" ] && cp -r nginx "$config_dir/"
    
    # Create compressed archive
    tar -czf "$BACKUP_DIR/config-$TIMESTAMP.tar.gz" -C "$BACKUP_DIR" "config-$TIMESTAMP"
    rm -rf "$config_dir"
    
    log "âœ… Configuration backup completed: config-$TIMESTAMP.tar.gz"
}

# Full backup
full_backup() {
    log "Starting full backup..."
    
    backup_database
    backup_files
    backup_logs
    backup_config
    
    # Create manifest file
    cat > "$BACKUP_DIR/backup-manifest-$TIMESTAMP.txt" << EOF
USSH Freshers' Hub - Full Backup
================================
Backup Date: $(date)
Backup Type: Full
Files:
- mongodb-$TIMESTAMP.tar.gz (Database)
- uploads-$TIMESTAMP.tar.gz (User uploads)
- logs-$TIMESTAMP.tar.gz (Application logs)
- config-$TIMESTAMP.tar.gz (Configuration files)

Restore Instructions:
1. Database: Extract and use mongorestore
2. Files: Extract to ./uploads directory
3. Config: Extract and review configuration files
4. Logs: Extract to ./logs directory for analysis

Generated by: $(whoami)
Host: $(hostname)
EOF
    
    log "âœ… Full backup completed with manifest: backup-manifest-$TIMESTAMP.txt"
}

# Cleanup old backups (keep last 7 days)
cleanup_old_backups() {
    log "Cleaning up old backups..."
    
    # Find and remove backup files older than 7 days
    find "$BACKUP_DIR" -name "*.tar.gz" -type f -mtime +7 -delete
    find "$BACKUP_DIR" -name "backup-manifest-*.txt" -type f -mtime +7 -delete
    
    log "âœ… Old backups cleaned up"
}

# Show backup statistics
show_stats() {
    log "Backup Statistics:"
    echo "===========================================" | tee -a "$LOG_FILE"
    echo "Backup Directory: $BACKUP_DIR" | tee -a "$LOG_FILE"
    echo "Total Backups: $(ls -1 "$BACKUP_DIR"/*.tar.gz 2>/dev/null | wc -l)" | tee -a "$LOG_FILE"
    echo "Disk Usage:" | tee -a "$LOG_FILE"
    du -sh "$BACKUP_DIR" | tee -a "$LOG_FILE"
    echo "Latest Backups:" | tee -a "$LOG_FILE"
    ls -lt "$BACKUP_DIR"/*.tar.gz 2>/dev/null | head -5 | tee -a "$LOG_FILE"
    echo "===========================================" | tee -a "$LOG_FILE"
}

# Main backup function
main() {
    log "ðŸ”„ Starting backup process - Type: $BACKUP_TYPE"
    
    check_containers
    
    case $BACKUP_TYPE in
        "database"|"db")
            backup_database
            ;;
        "files")
            backup_files
            ;;
        "logs")
            backup_logs
            ;;
        "config")
            backup_config
            ;;
        "full"|"all")
            full_backup
            ;;
        *)
            error "Unknown backup type: $BACKUP_TYPE. Use: full, database, files, logs, config"
            ;;
    esac
    
    cleanup_old_backups
    show_stats
    
    log "âœ… Backup process completed successfully!"
    log "ðŸ“‹ Backup log: $LOG_FILE"
}

# Handle script interruption
trap 'error "Backup interrupted by user"' INT TERM

# Run main function
main "$@"
